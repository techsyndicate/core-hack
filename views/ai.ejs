<% layout('layout') -%>
<%- include ./components/navLanding %>

<style>
body {
    padding: 0;
}
.main{
    display: flex;
    flex-direction: column;
    justify-content: center;
    margin-top: 4vw;
    padding: 0 20vw !important;
    width: 100vw;
}
#button{
    color: #111;
    background-color: #fd532f;
    padding: 1vmin 1.5vmin;
    border-radius: 10px;
    font-size: 2vh;
    font-weight: bold;
    cursor: pointer;
    border: none;
    width: 15vw;
}
#status{
    color:#fd532f;
}
.sochashit {
    background: #2a2a2a;
    display: flex;
    flex-direction: column;
    margin-bottom: 1.5vw;
    padding: 1vw;
    border-radius: 5px;
}
.sochashit > p {
    margin: 0;
}
#skeleton-loader, #skeleton-loader-2 , #skeleton-loader-3 {
    width: 80%;
    height: 20px;
    background: #4d4d4d;
    animation: skeleton-loading 1s infinite alternate;
    border-radius: 4px;
    margin-bottom: 10px;
}
@keyframes skeleton-loading {
    0% {
        opacity: 1;
    }
    100% {
        opacity: 0.3;
    }
}

</style>
<body>
    <div class="main">
        <h1 class="status">Shambhu is <span id="status">currently sleeping ðŸ˜ª</span></h1>
        <p id="btnText">Press button to wake up Shambhu</p>
        <div class="sochashit" style="display: none;" id="rishit">
            <p id="sochaHua" style="display: none;"></p>
            <div class="loaders" id="loaders">
                <div id="skeleton-loader"></div>
                <div style="width: 50%;" id="skeleton-loader-2"></div>
                <div style="width: 70%; margin-bottom: 0;" id="skeleton-loader-3"></div>
            </div>
        </div>
        <button id="button">Wake Shambhu</button>
    </div>
</body>
<script>
    const status = document.getElementById('status')
    const btnText = document.getElementById('btnText')
    const button = document.getElementById('button')
    const rishit = document.getElementById('rishit')
    const sochaHua = document.getElementById('sochaHua')
    const loaders = document.getElementById('loaders')

    console.log(sochaHua)
    
    button.addEventListener('click', async (e) => {
        button.disabled = true
        event.preventDefault()

        console.log('button pressed')
        status.innerText = " now awake ðŸ™‚"
        btnText.innerText = "Shambhu is LISTENING"
        rishit.style.display = "block"

        var userSpeech = ''
        try {
            const result = await startSpeechRecognition();
            console.log(result.length)
            if (!result) {
                return btnText.innerText = `Oops! Shambhu couldn't hear you.`;
            }
            userSpeech = result
            btnText.innerText = `You said: ${result}`;

            try {
                console.log(result)
                googleKoMaro("You are Shambhu, a virtual AI Companion, who helps an astronaut in maintaining their mental health. Respond to them for whatever they ask for. Here's what they are saying:" + result +"You act like a friend to them. You support them in their tough times. Talk to them as if you're their very own. Also, here's their information: Fname: <%= user.fname %> Lname: <%= user.fname %>. Provide a response in less than 75 words.").then(async response => { // YAHA PE USER SPEACH KI JAGAH TRAINING DATA LIKHDENA SEE SYNAPSE CODE TECHSYNDICATE REPO
                    console.log(response)
                    if (response.length > 500) {
                        response = response.slice(0, 70)
                        sochaHua.innerText = response + "..."
                    }
                    loaders.style.display = "none"
                    sochaHua.style.display = "block"
                    sochaHua.innerText = response
                    encodedResponse = response.replace("'", "%27")
                    encodedResponse = encodedResponse.replace('"', "%22")

                    // console.log("1", encodedResponse, userSpeech)
                    const response2 = await fetch('/ai/storeChat', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ "response": encodedResponse, "query": userSpeech})
                    });

                    const result = await response2.json();

                    if (result.success) {
                        console.log(result.message);
                    } else {
                        console.error('Error:', result.error);
                        sochaHua.style.display = "block"
                        sochaHua.innerText = `Oops an error occurred.`;
                        button.innerText = "Do it again"
                        button.disabled = false
                        return
                    }

                    try {
                        const result = await speakText(response).then(() => {
                            button.innerText = "Do it again"
                            button.disabled = false
                        })
                    } catch (error) {
                        console.error(error);
                        sochaHua.style.display = "block"
                        sochaHua.innerText = `Oops an error occurred.`;
                        button.innerText = "Do it again"
                        button.disabled = false
                    }
                })
            } catch {
                sochaHua.style.display = "block"
                sochaHua.innerText = `Oops an error occurred.`;
                button.innerText = "Do it again"
                button.disabled = false
            }
        } catch {
            console.log('dadas')
            sochaHua.style.display = "block"
            sochaHua.innerText = `Oops an error occurred.`;
            button.innerText = "Do it again"
            button.disabled = false
        }

    })

    async function speakText(text) {
            const response = await fetch('https://api.elevenlabs.io/v1/text-to-speech/IKne3meq5aSn9XLyUdCD', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'xi-api-key': 'sk_3dc79a1715fe01a3db4fdc00fa6304cedcb10238e7eee5e8' // Replace with your Eleven Labs API key
                },
                body: JSON.stringify({
                    text: text,
                    model_id: 'eleven_monolingual_v1',
                    voice_settings: {
                        stability: 0.5,
                        similarity_boost: 0.5
                    }
                })
            });

            if (!response.ok) {
                console.error('Error:', response.statusText);
                return;
            }

            const blob = await response.blob();
            const audioUrl = URL.createObjectURL(blob);
            const audio = new Audio(audioUrl);
            audio.play();
        }



    function startSpeechRecognition() {
        return new Promise((resolve, reject) => {
            if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
                const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
                const recognition = new SpeechRecognition();

                recognition.continuous = false;
                recognition.interimResults = false;
                recognition.lang = 'en-US';

                console.log('listening')

                recognition.onresult = (event) => {
                    const speechResult = event.results[0][0].transcript;
                    resolve(speechResult);
                };

                recognition.onerror = (event) => {
                    reject(`Error occurred in recognition: ${event.error}`);
                };

                recognition.onend = () => {
                    console.log('Recognition ended');
                };

                recognition.start();
            } else {
                reject('Browser does not support the Web Speech API');
            }
        });
    }

    function googleKoMaro(prompt) {
            return new Promise((resolve, reject) => {
                fetch("https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=AIzaSyBOPaHyQKKBSHp2NHAVEnDfqF-eSxEacso", {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        "contents": [{
                            "parts": [{
                                "text": prompt
                            }]}
                        ]})
                })
                .then(rawResponse => {
                    if (!rawResponse.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return rawResponse.json();
                })
                .then(content => {
                    console.log(content);
                    if (content.candidates[0].finishReason == "MAX_TOKENS") {
                        text.innerText = "The service is unavailable right now. Please try again after a minute or so.";
                    }
                    console.log(content.candidates[0].content.parts[0].text);
                    resolve(content.candidates[0].content.parts[0].text);
                })
                .catch(error => {
                    console.error('There was a problem with the fetch operation:', error);
                    reject(error);
                });
            });
        }

</script>
</html>

<!-- sk_3dc79a1715fe01a3db4fdc00fa6304cedcb10238e7eee5e8 -->