<% layout('layout') -%>
    <style>
        body,
        html {
            margin: 0;
            padding: 0;
            background-color: #111;
            color: #e0f2ff;
            height: 100%;
        }

        .container {
            display: flex;
            height: 100vh;
        }

        #map {
            flex: 7;
            height: 100%;
        }

        #info-panel {
            flex: 3;
            padding: 20px;
            background-color: #111;
            overflow-y: auto;
            box-shadow: -5px 0 15px rgba(0, 0, 0, 0.2);
        }

        h1,
        h2 {
            color: #fff;
            margin-top: 0;
        }

        .info-box {
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border: 1px solid #555;
            color: #fff;
        }

        .parameter {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
        }

        .value {
            font-weight: bold;
            color: #fff;
        }

        #status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 8px;
        }

        .emergency {
            background-color: transparent;
            border-radius: 12px;
        }
    </style>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/satellite.js/4.1.3/satellite.min.js"></script>

<body>
    <div class="container">
        <div id="map"></div>
        <div id="info-panel">
            <h1 style="color: #fd532f;">ISS Tracker</h1>
            <div class="info-box">
                <h2>Keplerian Elements</h2>
                <div id="keps"></div>
            </div>
            <div class="info-box">
                <h2>Current Position</h2>
                <div id="position"></div>
            </div>
            <div class="info-box">
                <h2>Observer Location</h2>
                <div id="observer"></div>
            </div>
            <div class="info-box">
                <h2>Visibility</h2>
                <div id="visibility"></div>
            </div>

            <!-- <form action="/spaceguy/emergency" method="post">
                <button type="submit" class="emergency">
                    <h2>Emergency</h2>
                </button>
            </form> -->
        </div>
    </div>

    <script>
        let tleLine1, tleLine2;
        const observerLat = 38.75;
        const observerLon = -9.24;

        let map, issMarker, footprintPolygon;

        async function fetchTLE() {
            try {
                const response = await fetch('https://www.celestrak.com/NORAD/elements/stations.txt');
                const data = await response.text();
                const lines = data.split('\n');
                for (let i = 0; i < lines.length; i += 3) {
                    if (lines[i].includes('ISS (ZARYA)')) {
                        tleLine1 = lines[i + 1].trim();
                        tleLine2 = lines[i + 2].trim();
                        break;
                    }
                }
                if (!tleLine1 || !tleLine2) {
                    throw new Error('ISS TLE not found');
                }
            } catch (error) {
                console.error('Error fetching TLE:', error);
                tleLine1 = '1 25544U 98067A   23209.50800926  .00016117  00000-0  29421-3 0  9994';
                tleLine2 = '2 25544  51.6415  19.9871 0006998  40.7835 319.3913 15.50028344405095';
            }
        }

        function initMap() {
            map = L.map('map').setView([0, 0], 3);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors'
            }).addTo(map);

            issMarker = L.marker([0, 0], {
                icon: L.icon({
                    iconUrl: 'https://upload.wikimedia.org/wikipedia/commons/d/d0/International_Space_Station.svg',
                    iconSize: [40, 40],
                    iconAnchor: [20, 20]
                })
            }).addTo(map);

            footprintPolygon = L.polygon([], {
                color: '#4fc3f7',
                fillColor: '#4fc3f7',
                fillOpacity: 0.1
            }).addTo(map);

            L.marker([observerLat, observerLon]).addTo(map)
                .bindPopup('Observer Location').openPopup();
        }

        function updateISSPosition() {
            const now = new Date();
            const satrec = satellite.twoline2satrec(tleLine1, tleLine2);
            const positionAndVelocity = satellite.propagate(satrec, now);
            const gmst = satellite.gstime(now);
            const position = satellite.eciToGeodetic(positionAndVelocity.position, gmst);

            const lat = satellite.degreesLat(position.latitude);
            const lon = satellite.degreesLong(position.longitude);
            const alt = position.height;

            issMarker.setLatLng([lat, lon]);
            map.setView([lat, lon]);

            updateFootprint(lat, lon, alt);
            updateInfoPanel(lat, lon, alt);
            calculateVisibility(lat, lon, alt);
        }

        function updateFootprint(lat, lon, alt) {
            const radius = Math.sqrt(2 * 6371 * alt);
            const points = 144;
            const coords = [];

            for (let i = 0; i < points; i++) {
                const angle = (i / points) * (2 * Math.PI);
                const ptLat = lat + (radius / 111.32) * Math.cos(angle);
                const ptLon = lon + (radius / (111.32 * Math.cos(lat * Math.PI / 180))) * Math.sin(angle);
                coords.push([ptLat, ptLon]);
            }

            footprintPolygon.setLatLngs(coords);
        }

        function updateInfoPanel(lat, lon, alt) {
            document.getElementById('keps').innerHTML = `
        <div class="parameter"><span>Inclination:</span><span class="value">${parseFloat(tleLine2.substring(8, 16))}°</span></div>
        <div class="parameter"><span>RAAN:</span><span class="value">${parseFloat(tleLine2.substring(17, 25))}°</span></div>
        <div class="parameter"><span>Eccentricity:</span><span class="value">${parseFloat('0.' + tleLine2.substring(26, 33))}</span></div>
        <div class="parameter"><span>Arg. of Perigee:</span><span class="value">${parseFloat(tleLine2.substring(34, 42))}°</span></div>
        <div class="parameter"><span>Mean Anomaly:</span><span class="value">${parseFloat(tleLine2.substring(43, 51))}°</span></div>
        <div class="parameter"><span>Mean Motion:</span><span class="value">${parseFloat(tleLine2.substring(52, 63))} rev/day</span></div>
    `;

            document.getElementById('position').innerHTML = `
        <div class="parameter"><span>Latitude:</span><span class="value">${lat.toFixed(4)}°</span></div>
        <div class="parameter"><span>Longitude:</span><span class="value">${lon.toFixed(4)}°</span></div>
        <div class="parameter"><span>Altitude:</span><span class="value">${alt.toFixed(2)} km</span></div>
    `;

            document.getElementById('observer').innerHTML = `
        <div class="parameter"><span>Latitude:</span><span class="value">${observerLat}°</span></div>
        <div class="parameter"><span>Longitude:</span><span class="value">${observerLon}°</span></div>
    `;
        }

        function calculateVisibility(satLat, satLon, satAlt) {
            const observerGd = {
                longitude: satellite.degreesToRadians(observerLon),
                latitude: satellite.degreesToRadians(observerLat),
                height: 0.1
            };

            const satEcf = satellite.geodeticToEcf({
                longitude: satellite.degreesToRadians(satLon),
                latitude: satellite.degreesToRadians(satLat),
                height: satAlt
            });

            const lookAngles = satellite.ecfToLookAngles(observerGd, satEcf);
            const elevation = satellite.radiansToDegrees(lookAngles.elevation);
            const azimuth = satellite.radiansToDegrees(lookAngles.azimuth);

            let visibility = 'Not visible';
            let statusColor = '#ff4d4d';
            if (elevation > 10) {
                visibility = 'Visible';
                statusColor = '#4dff4d';
            } else if (elevation > 0) {
                visibility = 'Low on horizon';
                statusColor = '#ffd700';
            }

            document.getElementById('visibility').innerHTML = `
        <div class="parameter">
        <span>Status:</span>
        <span class="value">
            <span id="status-indicator" style="background-color: ${statusColor};"></span>
            ${visibility}
        </span>
        </div>
        <div class="parameter"><span>Elevation:</span><span class="value">${elevation.toFixed(2)}°</span></div>
        <div class="parameter"><span>Azimuth:</span><span class="value">${azimuth.toFixed(2)}°</span></div>
    `;
        }

        async function initialize() {
            await fetchTLE();
            initMap();
            updateISSPosition();
            setInterval(updateISSPosition, 1000);
            setInterval(fetchTLE, 60 * 60 * 1000); // Refresh TLE every hour
        }

        initialize();
    </script>
</body>

</html>